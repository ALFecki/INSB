// #include <iostream>
// #include <bitset>

// // Функция для перестановки битов
// std::bitset<32> permute(const std::bitset<32>& input, const int* table, int size) {
//     std::bitset<32> output;
//     for (int i = 0; i < size; ++i) {
//         output[i] = input[table[i] - 1];
//     }
//     return output;
// }

// // Функция для выполнения циклического сдвига влево
// std::bitset<28> rotateLeft(const std::bitset<28>& input, int numShifts) {
//     return (input << numShifts) | (input >> (28 - numShifts));
// }

// // Функция для генерации подключей
// void generateSubkeys(const std::bitset<64>& key, std::bitset<48>* subkeys) {
//     // Таблица для перестановки PC-1
//     const int pc1Table[56] = {
//         57, 49, 41, 33, 25, 17, 9,  1,
//         58, 50, 42, 34, 26, 18, 10, 2,
//         59, 51, 43, 35, 27, 19, 11, 3,
//         60, 52, 44, 36, 63, 55, 47, 39,
//         31, 23, 15, 7,  62, 54, 46, 38,
//         30, 22, 14, 6,  61, 53, 45, 37,
//         29, 21, 13, 5,  28, 20, 12, 4
//     };

//     // Таблица для перестановки PC-2
//     const int pc2Table[48] = {
//         14, 17, 11, 24, 1,  5,
//         3,  28, 15, 6,  21, 10,
//         23, 19, 12, 4,  26, 8,
//         16, 7,  27, 20, 13, 2,
//         41, 52, 31, 37, 47, 55,
//         30, 40, 51, 45, 33, 48,
//         44, 49, 39, 56, 34, 53,
//         46, 42, 50, 36, 29, 32
//     };

//     std::bitset<56> permutedKey = permute(key, pc1Table, 56);

//     std::bitset<28> left = permutedKey >> 28;
//     std::bitset<28> right = permutedKey & 0xfffffff;

//     for (int i = 0; i < 16; ++i) {
//         left = rotateLeft(left, 1);
//         right = rotateLeft(right, 1);

//         std::bitset<56> shiftedKey = (left.to_ullong() << 28) | right.to_ullong();
//         subkeys[i] = permute(shiftedKey, pc2Table, 48);
//     }
// }

// // Функция для выполнения преобразования S-блоков
// std::bitset<32> sBox(const std::bitset<48>& input) {
//     // Таблицы S-блоков
//     const int sBoxTables[8][4][16] = {
//         {
//             {14, 4,  13, 1,  2,  15, 11, 8,  3,  10, 6,  12, 5,  9,  0,  7},
//             {0,  15, 7,  4,  14, 2,  13, 1,  10, 6,  12, 11, 9,  5,  3,  8},
//             {4,  1,  14, 8,  13, 6,  2,  11, 15, 12, 9,  7,  3,  10, 5,  0},
//             {15, 12, 8,  2,  Программа продолжается:

//             4,  11, 10, 0,  7,  6,  1,  13, 14, 3,  9,  5,  0,  15, 12, 8}
//         },
//         {
//             {15, 1,  8,  14, 6,  11, 3,  4,  9,  7,  2,  13, 12, 0,  5,  10},
//             {3,  13, 4,  7,  15, 2,  8,  14, 12, 0,  1,  10, 6,  9,  11, 5},
//             {0,  14, 7,  11, 10, 4,  13, 1,  5,  8,  12, 6,  9,  3,  2,  15},
//             {13, 8,  10, 1,  3,  15, 4,  2,  11, 6,  7,  12, 0,  5,  14, 9}
//         },
//         {
//             {10, 0,  9,  14, 6,  3,  15, 5,  1,  13, 12, 7,  11, 4,  2,  8},
//             {13, 7,  0,  9,  3,  4,  6,  10, 2,  8,  5,  14, 12, 11, 15, 1},
//             {13, 6,  4,  9,  8,  15, 3,  0,  11, 1,  2,  12, 5,  10, 14, 7},
//             {1,  10, 13, 0,  6,  9,  8,  7,  4,  15, 14, 3,  11, 5,  2,  12}
//         },
//         {
//             {7,  13, 14, 3,  0,  6,  9,  10, 1,  2,  8,  5,  11, 12, 4,  15},
//             {13, 8,  11, 5,  6,  15, 0,  3,  Программа продолжается:

//             4,  7,  2,  12, 5,  10, 14, 15, 9,  8,  3,  0,  11, 1,  13, 6}
//         },
//         {
//             {1,  4,  11, 13, 12, 3,  7,  14, 10, 15, 6,  8,  0,  5,  9,  2},
//             {6,  11, 13, 8,  1,  4,  10, 7,  9,  5,  0,  15, 14, 2,  3,  12},
//             {11, 0,  5,  14, 12, 3,  7,  9,  1,  2,  8,  6,  10, 4,  15, 13},
//             {0,  14, 7,  11, 10, 4,  13, 1,  5,  8,  12, 6,  9,  3,  2,  15}
//         },
//         {
//             {13, 2,  8,  4,  6,  15, 11, 1,  10, 9,  3,  14, 5,  0,  12, 7},
//             {1,  15, 13, 8,  10, 3,  7,